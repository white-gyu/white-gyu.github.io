{"componentChunkName":"component---src-templates-blog-post-js","path":"/HTTP/한번쯤-만나봤을-cors에-대하여/","result":{"data":{"site":{"siteMetadata":{"title":"white-gyu Logs","author":"white-gyu","siteUrl":"https://white-gyu.github.io","sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"25e47170-7ebf-5304-9556-a9e07495da53","excerpt":"개발자라면 한번쯤은 만나봤을  정책에 대해 알아보려 한다.  CORS 개요  에러는  정책을 위반해 발생한 에러다. 하지만  정책 덕분에 여러 곳에서 가져오는 리소스가 안전하다는 최소한의 보장을 받을 수 있다. , 라는 뜻으로 이에 대해 알아보자. 출처(= Origin)이란? 출처 = protocol + host + port…","html":"<p>개발자라면 한번쯤은 만나봤을 <code class=\"language-text\">CORS(= Cross-Origin Resource Sharing)</code> 정책에 대해 알아보려 한다. </p>\n<h2 id=\"cors-개요\" style=\"position:relative;\"><a href=\"#cors-%EA%B0%9C%EC%9A%94\" aria-label=\"cors 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS 개요</h2>\n<p><code class=\"language-text\">CORS</code> 에러는 <code class=\"language-text\">CORS</code> 정책을 위반해 발생한 에러다. 하지만 <code class=\"language-text\">CORS</code> 정책 덕분에 여러 곳에서 가져오는 리소스가 안전하다는 최소한의 보장을 받을 수 있다.<br>\n<code class=\"language-text\">CORS</code>, <code class=\"language-text\">교차 출처 리소스 공유</code>라는 뜻으로 이에 대해 알아보자.</p>\n<h2 id=\"출처-origin이란\" style=\"position:relative;\"><a href=\"#%EC%B6%9C%EC%B2%98-origin%EC%9D%B4%EB%9E%80\" aria-label=\"출처 origin이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출처(= Origin)이란?</h2>\n<blockquote>\n<p>출처 = protocol + host + port</p>\n</blockquote>\n<div align=\"center\">\n    <img style=\"width: 600px;\" src=\"https://www.notion.so/image/https%3A%2F%2Flh5.googleusercontent.com%2Fau-z1C1EX6pFkKoPT1mICvT3Vp4iIwQ5LwoxdqWhvX8-hmsQLfQqsTyMz4eDoXiVv_vTCkbU-Tsxmy27Kqxpsj0r0JlWdvMMbD6sRuMckSepHdevO9QGb363EYOOthDIZ-5wfoqI?table=block&amp;id=111a6874-aed8-45e6-a3a8-84c3470fbd6d&amp;width=2000&amp;userId=&amp;cache=v2\" alt=\"\">\n</div>\n<p><code class=\"language-text\">출처</code>란 서버의 위치를 찾아가기 위해 필요한 가장 기본적인 정보를 합쳐놓은 것이다. 우리는 개발자 도구 콘솔에서 <code class=\"language-text\">Location</code> 객체가 갖고 있는 <code class=\"language-text\">Origin</code> 프로퍼티에 접근하여\n어플리케이션 출처를 알수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"https://white-gyu.github.io\"</span></code></pre></div>\n<h2 id=\"cors는-어떻게-동작할까\" style=\"position:relative;\"><a href=\"#cors%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8F%99%EC%9E%91%ED%95%A0%EA%B9%8C\" aria-label=\"cors는 어떻게 동작할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS는 어떻게 동작할까?</h2>\n<p>기본적으로 웹 클라이언트 어플리케이션이 다른 출처의 리소스를 요청할 때는 HTTP 프로토콜을 사용하여 요청을 보낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"httprequest\"><pre class=\"language-httprequest\"><code class=\"language-httprequest\">Origin: https://white-gyu.github.io</code></pre></div>\n<p>이후 기본적인 흐름은 아래와 같다.</p>\n<ol>\n<li>브라우저는 요청 헤더에 Origin 필드에 요청을 보내는 출처를 함께 담아 보낸다.</li>\n<li>서버가 이 요청에 대한 응답을 할 때 응답 헤더의 <code class=\"language-text\">Access-Controller-Allow-Origin</code> 이라는 값에 “이 리소스에 접근할 수 있는 출처” 를 담아 보낸다.</li>\n<li>응답을 받은 브라우저는 자신이 보냈던 요청의 <code class=\"language-text\">Origin</code>과 서버가 보내준 응답의 <code class=\"language-text\">Access-Controller-Allow-Origin</code>을 비교해본 후 이 응답이 유효한 응답인지 아닌지를 확인한다. </li>\n</ol>\n<h3 id=\"preflight-request\" style=\"position:relative;\"><a href=\"#preflight-request\" aria-label=\"preflight request permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preflight Request</h3>\n<blockquote>\n<p>브라우저가 요청을 한번에 보내지 않고 예비 요청과 본 요청을 나누어 서버 전송<br>\n<code class=\"language-text\">Preflight</code>란, 본 요청을 보내기 전에 보내는 요청 → HTTP OPTIONS 메소드 이용하여 해당 요청이 안전한지 확인</p>\n</blockquote>\n<div align=\"center\">\n    <img src=\"https://evan-moon.github.io/static/c86699252752391939dc68f8f9a860bf/6af66/cors-preflight.png\" alt=\"\">\n</div>\n<ol>\n<li>브라우저에게 리소스를 받아오라는 명령을 내리면 <strong>브라우저는 서버에게 예비 요청을 먼저 보낸다.</strong></li>\n<li>서버는 이 예비 요청에 대한 응답으로 <strong>허용 및 금지에 대한 정보를 응답 헤더에 담아서 브라우저에 응답한다.</strong></li>\n<li>브라우저는 자신이 보낸 예비 요청과 서버가 응답에 담아준 허용 정책을 비교한 후 이 요청이 <strong>안전하다고 판단되면 같은 엔드포인트로 다시 본 요청 전송</strong></li>\n<li>서버가 본 요청에 대한 응답을 하면 브라우저는 최종적으로 이 응답 데이터를 클라이언트에 넘겨준다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/xml'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://white-gyu.tistory.com/rss'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> headers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\">OPTIONS https://white-gyu.tistory.com/rss\n\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">*/*</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip, deflate, br</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Language</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">en-US,en;q=0.9,ko;q=0.8,ja;q=0.7,la;q=0.6</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Access-Control-Request-Headers</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">content-type</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Access-Control-Request-Method</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">GET</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">keep-alive</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">evanmoon.tistory.com</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Origin</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">https://white-gyu.github.io</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Referer</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">https://white-gyu.github.io/HTTP/한번쯤-만나봤을-cors에-대하여/</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Sec-Fetch-Dest</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">empty</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Sec-Fetch-Mode</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">cors</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Sec-Fetch-Site</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">cross-site</span></span></code></pre></div>\n<p>실제로 브라우저가 보낸 요청을 보면, 단순히 Origin에 대한 정보 뿐만 아니라 <strong>자신이 예비 요청 이후에 보낼 본 요청에 대한 다른 정보들도 함께 포함</strong>되어 있는 것을 볼 수 있다.</p>\n<h3 id=\"simple-request\" style=\"position:relative;\"><a href=\"#simple-request\" aria-label=\"simple request permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simple Request</h3>\n<p><code class=\"language-text\">Simple Request</code>는 예비 요청을 보내지 않고 바로 서버에게 본 요청부터 보낸 후 서버가 이에 대한 응답의 헤더에 <code class=\"language-text\">Access-Control-Allow-Origin</code>과 같은 값을 보내주면 그때 브라우저가 CORS 정책 위반 여부를 검사하는 방식이다. 즉, <code class=\"language-text\">Preflight</code>와 <code class=\"language-text\">Simple Request</code> 시나리오는 전반적인 로직 자체는 같고 예비 요청의 존재 유무만 다르다.</p>\n<div align=\"center\">\n    <img src=\"https://evan-moon.github.io/static/d8ed6519e305c807c687032ff61240f8/6af66/simple-request.png\" alt=\"\">\n</div>\n<p>하지만 아무 때나 단순 요청을 사용할 수 있는 것은 아니고, 특정 조건을 만족하는 경우에만 예비 요청을 생략할 수 있다. 게다가 이 조건이 조금 까다롭기 때문에 일반적인 방법으로 웹 어플리케이션 아키텍처를 설계하게 되면 거의 충족시키기 어려운 조건이다.</p>\n<hr>\n<ol>\n<li>요청 메소드 = <code class=\"language-text\">GET</code>, <code class=\"language-text\">HEAD</code>, <code class=\"language-text\">POST</code></li>\n<li>지원 가능한 헤더 목록 = <code class=\"language-text\">Accept</code>, <code class=\"language-text\">Accept-Language</code>, <code class=\"language-text\">Content-Language</code>, <code class=\"language-text\">Content-Type</code>, <code class=\"language-text\">DPR</code>, <code class=\"language-text\">Downlink</code>, <code class=\"language-text\">Save-Data</code>, <code class=\"language-text\">Viewport-Width</code>, <code class=\"language-text\">Width</code></li>\n<li>만약 <code class=\"language-text\">Content-Type</code>을 사용하는 경우에는 <code class=\"language-text\">application/x-www-form-urlencoded</code>, <code class=\"language-text\">multipart/form-data</code>, <code class=\"language-text\">text/plain</code>만 허용</li>\n</ol>\n<hr>\n<h3 id=\"credentialed-request\" style=\"position:relative;\"><a href=\"#credentialed-request\" aria-label=\"credentialed request permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Credentialed Request</h3>\n<blockquote>\n<p>인증된 요청을 사용하는 방법. 다른 출처 간 통신에서 좀 더 보안을 강화하고 싶을 때 사용하는 방법</p>\n</blockquote>\n<p>기본적으로 브라우저가 제공하는 비동기 리소스 요청 API인 <code class=\"language-text\">XMLHttpRequest 객체</code>나 <code class=\"language-text\">fetch API</code>는 별도의 옵션 없이 브라우저의 쿠키 정보나 <strong>인증과 관련된 헤더를 함부로 요청에 담지 않는다.</strong> 이때 요청에 인증과 관련된 정보를 담을 수 있게 해주는 옵션이 바로 <code class=\"language-text\">credentials Request</code>이다.</p>\n<p>이 옵션에는 총 3가지의 값을 사용할 수 있으며, 각 값들이 가지는 의미는 다음과 같다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><div align=\"center\">옵션 값</div></th>\n<th align=\"left\"><div align=\"center\">설명</div></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">same-origin (기본값)</td>\n<td align=\"left\">같은 출처 간 요청에만 인증 정보를 담을 수 있다.</td>\n</tr>\n<tr>\n<td align=\"center\">include</td>\n<td align=\"left\">모든 요청에 인증 정보 담을 수 있다.</td>\n</tr>\n<tr>\n<td align=\"center\">omit</td>\n<td align=\"left\">모든 요청에 인증 정보를 담지 않는다.</td>\n</tr>\n</tbody>\n</table>\n<p>만약 <code class=\"language-text\">same-origin</code>이나 <code class=\"language-text\">include</code>와 같은 옵션을 사용하여 리소스 요청에 인증 정보가 포함된다면, 이제 브라우저는 다른 출처의 리소스를 요청할 때 단순히 <code class=\"language-text\">Access-Control-Allow-Origin</code>만 확인하는 것이 아니라 <strong>좀 더 빡빡한 검사 조건을 추가하게 된다.</strong></p>\n<p>브라우저는 인증 모드가 <code class=\"language-text\">include</code>일 경우, 모든 요청을 허용한다는 의미의 *를 <code class=\"language-text\">Access-Control-Allow-Origin</code> 헤더에 사용하면 안된다고 이야기하고 있다.  </p>\n<p>이처럼 요청에 인증 정보가 담겨있는 상태에서 다른 출처의 리소스를 요청하게 되면 브라우저는 CORS 정책 위반 여부를 검사하는 룰에 다음 두 가지를 추가하게 된다.</p>\n<hr>\n<ol>\n<li><code class=\"language-text\">Access-Control-Allow-Origin</code>에는 *를 사용할 수 없으며, 명시적인 URL이어야한다</li>\n<li>응답 헤더에는 반드시 <code class=\"language-text\">Access-Control-Allow-Credentials</code>: <strong>true</strong>가 존재해야한다.</li>\n</ol>\n<hr>\n<h2 id=\"cors를-해결할-수-있는-방법\" style=\"position:relative;\"><a href=\"#cors%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"cors를 해결할 수 있는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS를 해결할 수 있는 방법</h2>\n<h3 id=\"1-access-control-allow-origin-설정\" style=\"position:relative;\"><a href=\"#1-access-control-allow-origin-%EC%84%A4%EC%A0%95\" aria-label=\"1 access control allow origin 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Access-Control-Allow-Origin 설정</h3>\n<p>CORS 정책 위반으로 인한 문제를 해결하는 가장 대표적인 방법은, 그냥 정석대로 서버에서 <code class=\"language-text\">Access-Control-Allow-Origin</code> 헤더에 <strong>알맞은 값을 세팅</strong>해주는 것이다.</p>\n<p>이때 <strong>와일드카드인 *을 사용하여 이 헤더를 세팅하게 되면 모든 출처에서 오는 요청을 받아먹겠다는 의미</strong>이므로 당장은 편할 수 있겠지만, 바꿔서 생각하면 정체도 모르는 이상한 출처에서 오는 요청까지 모두 받아먹겠다는 오픈 마인드와 다를 것 없으므로 <strong>보안적으로 심각한 이슈가 발생</strong>할 수도 있다.</p>\n<p>그러니 가급적이면 귀찮더라도 <code class=\"language-text\">Access-Control-Allow-Origin</code>: <code class=\"language-text\">https://white-gyu.github.io</code>와 같이 출처를 명시해주도록 하자.</p>\n<h3 id=\"2-webpack-dev-server로-reverse-proxying\" style=\"position:relative;\"><a href=\"#2-webpack-dev-server%EB%A1%9C-reverse-proxying\" aria-label=\"2 webpack dev server로 reverse proxying permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Webpack Dev Server로 Reverse Proxying</h3>\n<p><code class=\"language-text\">webpack-dev-server</code>가 제공하는 프록시 기능을 사용하면 아주 편하게 CORS 정책을 우회할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">proxy</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string-property property\">'/api'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://api.white-gyu.com'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">changeOrigin</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">pathRewrite</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'^/api'</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 설정을 해놓으면 로컬 환경에서 <code class=\"language-text\">/api</code>로 시작하는 URL로 보내는 요청에 대해 브라우저는 <code class=\"language-text\">localhost:8000/api</code>로 요청을 보낸 것으로 알고 있지만, 사실 뒤에서 웹팩이 <code class=\"language-text\">https://api.white-gyu.com</code>으로 <strong>요청을 프록싱해주기 때문에 마치 CORS 정책을 지킨 것처럼 브라우저를 속이면서도 우리는 원하는 서버와 자유롭게 통신</strong>을 할 수 있다. 즉, 프록싱을 통해 CORS 정책을 우회할 수 있는 것이다.</p>\n<p>물론 로컬 개발 환경에서야 웹팩이 요청을 프록싱해주니 아무 이상이 없다. 하지만 어플리케이션을 빌드하고 서버에 올리고 나면 더 이상 <code class=\"language-text\">webpack-dev-server</code>가 <strong>구동하는 환경이 아니기 때문에 프록싱이고 나발이고 이상한 곳으로 API 요청</strong>을 보내게 된다. 그래서 로컬 환경에서만 활용 하는 것을 추천한다.</p>\n<h2 id=\"참고-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 자료</h2>\n<p><a href=\"https://evan-moon.github.io/2020/05/21/about-cors/\">CORS는 왜 이렇게 우리를 힘들게 하는걸까?</a></p>","frontmatter":{"title":"한번쯤 만나봤을 CORS에 대하여","date":"May 27, 2022"}}},"pageContext":{"slug":"/HTTP/한번쯤-만나봤을-cors에-대하여/","previous":{"fields":{"slug":"/Mysql/알-수-없는-개인정보/"},"frontmatter":{"title":"알 수 없는 개인정보"}},"next":null}},"staticQueryHashes":["2486386679","3128451518"]}