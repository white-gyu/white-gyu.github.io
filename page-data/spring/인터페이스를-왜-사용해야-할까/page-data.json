{"componentChunkName":"component---src-templates-blog-post-js","path":"/Spring/인터페이스를-왜-사용해야-할까/","result":{"data":{"site":{"siteMetadata":{"title":"white-gyu Logs","author":"white-gyu","siteUrl":"https://white-gyu.github.io","sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"49cfeafd-2918-520e-b0f6-50db4d57e61b","excerpt":"스프링에서 개발을 하면서 관습적으로 Service 인터페이스를 만들고 ServiceImpl 클래스를 만들어 Controller에 빈을 주입했었다. interface로 빈 주입을 하는 이유에 의문점이 들어 이에 대해서는 전에 알아보았다. 이제는 조금 더 포괄적으로 자바에선 왜 인터페이스를 잘 활용해야 하는지에 대한 의구심이 생겼다.\n추상적으론 느슨한 결합, 다양한 디자인 패턴 활용 과 같은 이유 때문이겠지 라며 생각은 했다. 하지만, 실제로 와닿지도 않고 이에 대해 이해가 10…","html":"<p>스프링에서 개발을 하면서 관습적으로 Service 인터페이스를 만들고 ServiceImpl 클래스를 만들어 Controller에 빈을 주입했었다.<br>\n<a href=\"https://white-gyu.github.io/2022/01/15/bean-injection/#_3-%E1%84%8B%E1%85%AB-%E1%84%80%E1%85%AE%E1%86%AE%E1%84%8B%E1%85%B5-%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%90%E1%85%A5%E1%84%91%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3%E1%84%85%E1%85%B3%E1%86%AF-bean%E1%84%8B%E1%85%B3%E1%84%85%E1%85%A9-%E1%84%8C%E1%85%AE%E1%84%8B%E1%85%B5%E1%86%B8%E1%84%92%E1%85%A1%E1%86%AF%E1%84%81%E1%85%A1\">interface로 빈 주입을 하는 이유</a>에 의문점이 들어 이에 대해서는 전에 알아보았다. 이제는 조금 더 포괄적으로 <strong>자바에선 왜 인터페이스를 잘 활용</strong>해야 하는지에 대한 의구심이 생겼다.\n추상적으론 <strong>느슨한 결합</strong>, <strong>다양한 디자인 패턴 활용</strong> 과 같은 이유 때문이겠지 라며 생각은 했다. 하지만, 실제로 와닿지도 않고 이에 대해 이해가 100% 된 것도 아니라 자세히 알아보려 한다. </p>\n<h2 id=\"인터페이스란\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%9E%80\" aria-label=\"인터페이스란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스란?</h2>\n<p><code class=\"language-text\">java interface</code> 는 구현되지 않고 메서드 이름만 정의된 클래스의 골격이다. </p>\n<blockquote>\n<p>추상클래스와 비교하자면 추상클래스는 미완성 설계도,<br>\n인터페이스는 밑그림만 그려져있는 기본 설계도</p>\n</blockquote>\n<p>위에 언급한 정의는 java interface 의 정의인데, 예를들어 api 는 application programming interface, ui 는 user interface, 이들은 인터페이스인데 java 에 종속된 개념이 아니지않는가?\n따라서 <strong>interface 자체의 의미</strong>를 생각해볼 필요가있다.</p>\n<h3 id=\"인터페이스는-상호작용하는-곳\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%8A%94-%EC%83%81%ED%98%B8%EC%9E%91%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B3%B3\" aria-label=\"인터페이스는 상호작용하는 곳 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스는 상호작용하는 곳</h3>\n<p>말그대로 <code class=\"language-text\">inter-face</code> 이다. java를 만들때 어떤 추상 자료형의 이름을 interface 라고 붙인 이유가 있을것이다. 자바 interface도 결국은 외부 컴포넌트와 상호작용 하는 곳이라 할 수 있다.</p>\n<p>TV 리모컨을 예시로 들어보자. TV를 이용할때 사용자가 마주하는 리모컨이야 말로 인터페이스의 단적인 예로 볼 수 있다. 리모컨이라는 기계에서 인터페이스는 어디일까?\n각각의 버튼들, 손으로 쥐는부분, 배터리 장착시키는 부분, 사용자가 사용하는 부분들이 인터페이스일 것이다. java 인터페이스도 그렇다. java 인터페이스는 <code class=\"language-text\">어떤 역할을 하는 클래스</code>를\n사용할때 <strong>개발자가 사용할 부분들(오버라이딩될 메소드)</strong> 을 모아놓은 것이다.</p>\n<p>암호화/복호화 기능을 구현한다고 생각해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Crypto</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 암호화</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 복호화</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SHA512Crypto</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Crypto</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TODO: SHA512 방식으로 암호화</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TODO: SHA512 방식으로 복호화</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Crypto</span> crypto <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SHA512Crypto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 기존 SHA512 방식</span>\n<span class=\"token class-name\">String</span> enc <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Crypto 인터페이스를 통해 SHA512Crypto 인스턴스</strong>를 받는다. 개발자는 이 <strong>인터페이스(리모컨) 을 이용해 컨트롤</strong> 하는 것이다. 이렇듯 개발자와 상호 작용하는 역할을 한다는 뜻이다.</p>\n<p>이렇게 사용하다가 SHA512 방식이 좀 취약해져서 새로운 SuperPowerCrypto 클래스를 만들어내면?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Crypto</span> crypto <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SuperPowerCrypto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 신규 개발한 암호화 방식</span>\n<span class=\"token class-name\">String</span> enc <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 교체하면 된다. 이후 코드들은 인터페이스를 통해 컨트롤 하기 때문에 수정할 필요가 없다. 즉, <strong>구현부와 사용부가 완전히 분리되는 이점</strong>을 얻는다.</p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<ul>\n<li><code class=\"language-text\">inter-face</code>, 마주하는 기능</li>\n<li>OOP 중 OCP, <strong>개방-페쇠 원칙(확장에는 열려 있고 변화에 대해서는 닫혀 있어야 한다)에 적합</strong></li>\n<li>확장에는 열려있어 <strong>다형성</strong>은 자연스레 따라오는 성질</li>\n</ul>\n<h2 id=\"참고-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 자료</h2>\n<p><a href=\"https://intrepidgeeks.com/tutorial/why-is-the-java-interface-called-an-interface\">[java] interface 를 interface라고 하는 이유</a></p>","frontmatter":{"title":"인터페이스를 왜 사용해야 할까","date":"February 14, 2022"}}},"pageContext":{"slug":"/Spring/인터페이스를-왜-사용해야-할까/","previous":{"fields":{"slug":"/Architecture/forward-proxy-vs-reverse-proxy/"},"frontmatter":{"title":"Forward Proxy vs Reverse Proxy"}},"next":{"fields":{"slug":"/Spring/@bean-vs-@component/"},"frontmatter":{"title":"@Bean vs @Component"}}}},"staticQueryHashes":["2486386679","3128451518"]}