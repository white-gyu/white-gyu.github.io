{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"white-gyu Logs","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"개발자라면 한번쯤은 만나봤을  정책에 대해 알아보려 한다.  CORS 개요  에러는  정책을 위반해 발생한 에러다. 하지만  정책 덕분에 여러 곳에서 가져오는 리소스가 안전하다는 최소한의 보장을 받을 수 있다. , 라는 뜻으로 이에 대해 알아보자. 출처(= Origin)이란? 출처 = protocol + host + port 란 서버의 위치를 찾아가기 위…","fields":{"slug":"/HTTP/한번쯤-만나봤을-cors에-대하여/"},"frontmatter":{"date":"May 27, 2022","title":"한번쯤 만나봤을 CORS에 대하여","category":"HTTP","draft":false}}},{"node":{"excerpt":"최근에 ISMS 인증 심사를 받았다. 개인 정보 보호 관련 내용들이 오고 갔다. 자연스레 암호화에 대해 공부할 필요성을 느꼈다. 양방향 알고리즘 양방향 알고리즘이란, 복호화가 가능한 암호화 대칭키 알고리즘 대칭키 알고리즘이란, 암호화 키 = 복호화 키 대칭키 작동 순서 비대칭키 알고리즘 (= 공개키 알고리즘) 비대칭키 알고리즘이란, 암호화키 ≠ 복호화 키…","fields":{"slug":"/Mysql/알-수-없는-개인정보/"},"frontmatter":{"date":"March 29, 2022","title":"알 수 없는 개인정보","category":"Mysql","draft":false}}},{"node":{"excerpt":", ,  정의에 대해 알아보려 합니다. HTTP 프로토콜이란? Hypertext Transfer Protocol Hypertext란, 참조(하이퍼링크)를 통해 한 문서에서 다른 문서로 즉시 접근할 수 있는 텍스트 인터넷상에서 데이터를 주고 받기 위한 서버/클라이언트 모델을 따르는 프로토콜 어떤 종류의 데이터든 전송 가능 (HTML문서, 이미지, 동영상, …","fields":{"slug":"/Spring/restful의-hateoas에-대해-알아보자/"},"frontmatter":{"date":"March 04, 2022","title":"RestFul의 Hateoas에 대해 알아보자","category":"Spring","draft":false}}},{"node":{"excerpt":"HTTP Status Code (상태 코드) HTTP 요청이 성공했는지, 실패했는지를 서버에서 알려주는 코드 2XX Success 2xx 번대의 상태 코드는 서버가 클라이언트 요청을 성공적으로 처리했다는 것을 의미 200 OK 서버가 클라이언트의 요청을 정상적으로 처리 는 클라이언트에게 요청이 성공했다는 것을 응답하는 기능을 갖기 때문에 성공에 대한 모든…","fields":{"slug":"/HTTP/http-상태코드에-대하여/"},"frontmatter":{"date":"March 04, 2022","title":"HTTP 상태코드에 대하여","category":"HTTP","draft":false}}},{"node":{"excerpt":"란 데이터베이스의 설계를 재구성하는 테크닉입니다. DB 정규화의 목적은 보통 3가지입니다. 불필요한 데이터 제거 데이터 저장을 ‘논리적으로’ 삽입/수정/삭제 시 발생할 수 있는 오류 방지 1차 정규화 1차 정규화란, 테이블의 컬럼이 원자 값(= 1개 값)을 갖도록 테이블 분해 Kim의 수강 과목이 한 레코드 안에서 2개를 가져 1차 정규형에 위반됩니다. …","fields":{"slug":"/Mysql/db-정규화란/"},"frontmatter":{"date":"February 24, 2022","title":"DB 정규화란","category":"Mysql","draft":false}}},{"node":{"excerpt":"스프링에서 객체를 다루기 위해서는 객체가 Bean으로 등록이 돼야한다. 그 중에서 설정 관련 객체들은 @Bean,\n@Configuration으로 스프링 컨테이너에 Bean으로 등록한다.\n그럼 @Bean과 @Component의 차이는 뭘까? @Bean @Bean은 메서드 레벨에서 선언하며, 반환되는 객체를 개발자가 수동으로 등록하는 어노테이션이다. 개발자가…","fields":{"slug":"/Spring/@bean-vs-@component/"},"frontmatter":{"date":"February 23, 2022","title":"@Bean vs @Component","category":"Spring","draft":false}}},{"node":{"excerpt":"스프링에서 개발을 하면서 관습적으로 Service 인터페이스를 만들고 ServiceImpl 클래스를 만들어 Controller에 빈을 주입했었다. interface로 빈 주입을 하는 이유에 의문점이 들어 이에 대해서는 전에 알아보았다. 이제는 조금 더 포괄적으로 자바에선 왜 인터페이스를 잘 활용해야 하는지에 대한 의구심이 생겼다.\n추상적으론 느슨한 결합,…","fields":{"slug":"/Spring/인터페이스를-왜-사용해야-할까/"},"frontmatter":{"date":"February 14, 2022","title":"인터페이스를 왜 사용해야 할까","category":"Spring","draft":false}}},{"node":{"excerpt":"사용자가 www.google.com에 연결하려고 하면 사용자 pc가 직접 연결하는 게 아니라 Forward Proxy Server가 요청을 받아\nwww.google.com에 연결하여 그 결과를 클라이언트에게 forward 해줍니다. forward 프록시는 캐싱 기능이 있어 자주 사용되는 컨텐츠라면 월등한 성능 향상을 가져올 수 있으며 \n정해진 사이트만 연…","fields":{"slug":"/Architecture/forward-proxy-vs-reverse-proxy/"},"frontmatter":{"date":"February 09, 2022","title":"Forward Proxy vs Reverse Proxy","category":"Architecture","draft":false}}},{"node":{"excerpt":"최근에 객체를 생성할 때 생성자를 호출해서 생성하는 것이 아니라, of나 from 같은 키워드를 이용해서 객체를 생성하는 구문이 눈에 들어왔다.\n특정 개발자만 사용하는 컨벤션이 아닌거 같아 어디서부터 비롯된건지 알아볼 필요성을 느꼈다. 그 시작이 정적 팩터리 메소드인걸 알게 됐다. 1. 정적 팩토리 메소드란? 정적(static), 팩토리(factory),…","fields":{"slug":"/Java/정적-팩토리-메소드에-대하여/"},"frontmatter":{"date":"January 24, 2022","title":"정적 팩토리 메소드에 대하여","category":"Java","draft":false}}},{"node":{"excerpt":"1. 변수를 공유하는 방법 객체는 Heap 또는 Stack 메모리 영역에 배치시킬 수 있습니다. Heap 영역은 일반적으로 모든 thread에서 접근 할 수 있으며 stack은 thread 하나당 만들어 지는 메모리 영역으로 thread간 접근이 불가능한 것으로 알려져 있습니다. UserRepository 변수는 Heap 영역에 만들어진 객체를 가리키고 …","fields":{"slug":"/Java/threadlocal에-대하여/"},"frontmatter":{"date":"January 19, 2022","title":"ThreadLocal에 대하여","category":"Java","draft":false}}},{"node":{"excerpt":"getById 내부적으로 EntityManager.getReference() 메소드를 호출하기 때문에 엔티티를 직접 반환하는 것이 아니라 프록시만 반환합니다. 프록시만 반환하기 때문에 실제로 사용하기 전까지는 DB에 접근하지 않으며, 만약 나중에 프록시에서 DB에 접근하려고 할 때 데이터가 없다면 EntityNotFoundException이 발생합니다. …","fields":{"slug":"/JPA/getbyid-vs-findbyid/"},"frontmatter":{"date":"January 18, 2022","title":"getById vs findById","category":"JPA","draft":false}}},{"node":{"excerpt":"1. DI 방법 생성자 기반 주입 컨테이너가 알아서 생성자에게 객체를 넣어주면서 생성하게 됩니다. 생성자의 파라미터를 통해 의존 관계를 파악하기 쉽다는 장점이 존재합니다. 롬복의 도움으로 아래와 같이 코드를 줄일 수 있습니다. Setter 기반 주입 인수가 없는 생성자를 호출한 후 빈에서 setter를 호출해 주입하는 방식입니다.  필드 주입 필드 주입은…","fields":{"slug":"/Spring/bean-injection-하는-방법에-대하여/"},"frontmatter":{"date":"January 15, 2022","title":"Bean Injection 하는 방법에 대하여","category":"Spring","draft":false}}},{"node":{"excerpt":"1. Query Parameter 2. Path Variable 이 두 GET 요청은 같은 기능을 수행하지만 조금의 차이가 있다. Path Variable 어떤 resource 식별 REST API에서 값을 호출할 때 주로 사용  Query Parameter 정렬 & 필터링 기능 게시판의 페이지 및 검색 정보 전달","fields":{"slug":"/HTTP/query-parameter-vs-path-variable/"},"frontmatter":{"date":"January 14, 2022","title":"Query Parameter vs Path Variable","category":"HTTP","draft":false}}}]}},"pageContext":{}},"staticQueryHashes":["2486386679","3128451518"]}