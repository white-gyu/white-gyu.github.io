{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/garbage-collector에-대하여/","result":{"data":{"site":{"siteMetadata":{"title":"white-gyu Logs","author":"white-gyu","siteUrl":"https://white-gyu.github.io","sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"d54ee19a-ceca-5201-b46d-b56ac6f125a1","excerpt":"1. GC는 어떻게 처리를 할까? Garbage Collector란, 객체가 생성되고 메모리의 한 부분을 점유하고 특정 메소드가 수행이 완료되어 해당 객체가 더이상 필요없는 상태가 되어 이를 처리하는 작업 Garbage Collector는 아래의 역할을 한다. JVM 메모리 구조 Garbage Collector는 메모리 구조 중 을 다룬다. 이를 크게 , ,  세 영역으로 나눈다. 1) Young Generation : Eden 영역 + Survivor 영역 Eden 영역 Survivor…","html":"<h2 id=\"1-gc는-어떻게-처리를-할까\" style=\"position:relative;\"><a href=\"#1-gc%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%B2%98%EB%A6%AC%EB%A5%BC-%ED%95%A0%EA%B9%8C\" aria-label=\"1 gc는 어떻게 처리를 할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. GC는 어떻게 처리를 할까?</h2>\n<blockquote>\n<p>Garbage Collector란, 객체가 생성되고 메모리의 한 부분을 점유하고 특정 메소드가 수행이 완료되어 해당 객체가 더이상 필요없는 상태가 되어 이를 처리하는 작업</p>\n</blockquote>\n<p>Garbage Collector는 아래의 역할을 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 메모리 할당\n2. 사용중인 메모리 인식\n3. 사용하지 않는 메모리 인식</code></pre></div>\n<h3 id=\"jvm-메모리-구조\" style=\"position:relative;\"><a href=\"#jvm-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B5%AC%EC%A1%B0\" aria-label=\"jvm 메모리 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JVM 메모리 구조</h3>\n<p>Garbage Collector는 메모리 구조 중 <code class=\"language-text\">Heap</code>을 다룬다. 이를 크게 <code class=\"language-text\">Young</code>, <code class=\"language-text\">Old</code>, <code class=\"language-text\">Perm</code> 세 영역으로 나눈다.</p>\n<div align=\"center\">\n    <img src=\"https://t1.daumcdn.net/cfile/tistory/995811375C76841D02\" alt=\"\">\n</div>\n<h4 id=\"1-young-generation--eden-영역--survivor-영역\" style=\"position:relative;\"><a href=\"#1-young-generation--eden-%EC%98%81%EC%97%AD--survivor-%EC%98%81%EC%97%AD\" aria-label=\"1 young generation  eden 영역  survivor 영역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) Young Generation : Eden 영역 + Survivor 영역</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><div align=\"center\">Eden 영역</div></th>\n<th align=\"left\"><div align=\"center\">Survivor 영역</div></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">- 객체가 최초로 <code class=\"language-text\">Heap</code>에 할당되는 장소</td>\n<td align=\"left\">- <code class=\"language-text\">Eden 영역</code>에서 살아 남은 객체들이 잠시 머무르는 장소</td>\n</tr>\n<tr>\n<td align=\"left\">- 만일 <code class=\"language-text\">Eden 영역</code>이 가득 찼다면, Object의 참조 여부를 파악하고 <code class=\"language-text\">Live Object</code>는 <code class=\"language-text\">Suvrvior 영역</code>으로 넘긴다.</td>\n<td align=\"left\">이며 하나의 <code class=\"language-text\">Survivor 영역</code>만 사용</td>\n</tr>\n<tr>\n<td align=\"left\">- <code class=\"language-text\">참조가 사라진 Garbage Object</code>이면 남겨 놓는다.</td>\n<td align=\"left\">- 이러한 과정을 <code class=\"language-text\">Minor GC</code>라고 한다.</td>\n</tr>\n<tr>\n<td align=\"left\">- 모든 <code class=\"language-text\">Live Object</code>가 <code class=\"language-text\">Survivor 영역</code>으로 넘어간다면 <code class=\"language-text\">Eden 영역</code>을 모두 청소</td>\n<td align=\"left\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2-old-generation\" style=\"position:relative;\"><a href=\"#2-old-generation\" aria-label=\"2 old generation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) Old Generation</h4>\n<ul>\n<li><code class=\"language-text\">Survivor 영역</code>에서 살아남아 오랫동안 참조 되었고 앞으로도 사용될 확률이 높은 Object들을 저장하는 영역</li>\n<li><code class=\"language-text\">Old Generation</code>의 메모리가 충분하지 않으면 해당 영역에서 GC가 발생</li>\n<li>이를 <code class=\"language-text\">Major GC</code>라고 한다. → <code class=\"language-text\">Tenured 영역</code>에서 발행한 GC</li>\n</ul>\n<h4 id=\"3-perm\" style=\"position:relative;\"><a href=\"#3-perm\" aria-label=\"3 perm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) Perm</h4>\n<ul>\n<li>Perm 영역은 보통 Class Meta 정보나 Method의 메타 정보, static 변수와 상수 정보들이 저장되는 공간으로 흔히 메타데이터 저장 영역이라고 한다. 이 영역은 JAVA8 부터 Native Memory 영역으로 이동하였다.( 기존의 Perm영역에 존재하는 static object는 Heap 영역으로 옮겨졌다.)</li>\n</ul>\n<br>\n<h2 id=\"2-gc-모니터링-방법\" style=\"position:relative;\"><a href=\"#2-gc-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%EB%B0%A9%EB%B2%95\" aria-label=\"2 gc 모니터링 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. GC 모니터링 방법</h2>\n<br>\n<h2 id=\"3-gc-튜닝을-시도해보자\" style=\"position:relative;\"><a href=\"#3-gc-%ED%8A%9C%EB%8B%9D%EC%9D%84-%EC%8B%9C%EB%8F%84%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"3 gc 튜닝을 시도해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. GC 튜닝을 시도해보자</h2>\n<br> \n<h2 id=\"4-참고-자료\" style=\"position:relative;\"><a href=\"#4-%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"4 참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 참고 자료</h2>\n<p><a href=\"https://d2.naver.com/helloworld/1329\">Garbage Collection 과정</a></p>\n<p><a href=\"https://12bme.tistory.com/57\">[성능튜닝] 가비지 컬렉터(GC) 이해하기</a></p>\n<p><a href=\"https://d2.naver.com/helloworld/6043\">Garbage Collection 모니터링 방법</a></p>\n<p><a href=\"https://jjaesang.github.io/gc/2019/04/02/java-gc-monitoring.html\">Garbage Collector Monitoring</a></p>\n<p><a href=\"https://d2.naver.com/helloworld/37111\">Garbage Collection 튜닝</a></p>","frontmatter":{"title":"Garbage Collector에 대하여","date":"March 23, 2022"}}},"pageContext":{"slug":"/Java/garbage-collector에-대하여/","previous":{"fields":{"slug":"/Spring/restful의-hateoas에-대해-알아보자/"},"frontmatter":{"title":"RestFul의 Hateoas에 대해 알아보자"}},"next":{"fields":{"slug":"/Mysql/알-수-없는-개인정보/"},"frontmatter":{"title":"알 수 없는 개인정보"}}}},"staticQueryHashes":["2486386679","3128451518"]}