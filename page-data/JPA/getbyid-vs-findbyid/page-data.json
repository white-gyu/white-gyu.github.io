{"componentChunkName":"component---src-templates-blog-post-js","path":"/JPA/getbyid-vs-findbyid/","result":{"data":{"site":{"siteMetadata":{"title":"white-gyu Logs","author":"white-gyu","siteUrl":"https://white-gyu.github.io","sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"0219a865-30db-50ab-8e2d-c3dc56862d01","excerpt":"getById 내부적으로 EntityManager.getReference() 메소드를 호출하기 때문에 엔티티를 직접 반환하는 것이 아니라 프록시만 반환합니다. 프록시만 반환하기 때문에 실제로 사용하기 전까지는 DB에 접근하지 않으며, 만약 나중에 프록시에서 DB에 접근하려고 할 때 데이터가 없다면 EntityNotFoundException이 발생합니다. findById 실제로 DB에 요청해서 엔티티를 가져옵니다. 정확히 말하면, 영속성 컨텍스트의…","html":"<h2 id=\"getbyid\" style=\"position:relative;\"><a href=\"#getbyid\" aria-label=\"getbyid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getById</h2>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">getById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ID</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> ID_MUST_NOT_BE_NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getReference</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDomainClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>내부적으로 EntityManager.getReference() 메소드를 호출하기 때문에 엔티티를 직접 반환하는 것이 아니라 프록시만 반환합니다.<br>\n프록시만 반환하기 때문에 실제로 사용하기 전까지는 DB에 접근하지 않으며, 만약 나중에 프록시에서 DB에 접근하려고 할 때 데이터가 없다면 EntityNotFoundException이 발생합니다.</p>\n<h2 id=\"findbyid\" style=\"position:relative;\"><a href=\"#findbyid\" aria-label=\"findbyid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>findById</h2>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ID</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> ID_MUST_NOT_BE_NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> domainType <span class=\"token operator\">=</span> <span class=\"token function\">getDomainClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>metadata <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>domainType<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">LockModeType</span> type <span class=\"token operator\">=</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">getLockModeType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hints <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getQueryHints</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withFetchGraphs</span><span class=\"token punctuation\">(</span>em<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>hints<span class=\"token operator\">::</span><span class=\"token function\">put</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>domainType<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> hints<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>domainType<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> hints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>실제로 DB에 요청해서 엔티티를 가져옵니다.<br>\n정확히 말하면, 영속성 컨텍스트의 1차 캐시를 먼저 확인하고 데이터가 없으면 실제 DB에 데이터가 있는지 확인합니다.</p>\n<h2 id=\"차이점\" style=\"position:relative;\"><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>차이점</h2>\n<hr>\n<ul>\n<li>getById()가 해당 엔티티를 사용하기 전까진 DB에 접근하지 않기 때문에 성능상 좀 더 유리  </li>\n<li>특정 엔티티의 ID 값만 활용할 일이 있다면 DB에 접근하지 않고 프록시만 가져와서 사용 가능</li>\n</ul>\n<h2 id=\"test\" style=\"position:relative;\"><a href=\"#test\" aria-label=\"test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test</h2>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostServiceTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PostService</span> postService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">testGetById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> postService<span class=\"token punctuation\">.</span><span class=\"token function\">createMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        postService<span class=\"token punctuation\">.</span><span class=\"token function\">createPostByGet</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">testFindById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> postService<span class=\"token punctuation\">.</span><span class=\"token function\">createMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        postService<span class=\"token punctuation\">.</span><span class=\"token function\">createPostByFind</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- getById() 사용한 경우 member 테이블 조회하는 쿼리가 날아가지 않음</span>\n\nHibernate: \n    <span class=\"token keyword\">insert</span> \n    <span class=\"token keyword\">into</span>\n        member\n        <span class=\"token punctuation\">(</span>member_id<span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">values</span>\n        <span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span>\nHibernate: \n    <span class=\"token keyword\">insert</span> \n    <span class=\"token keyword\">into</span>\n        post\n        <span class=\"token punctuation\">(</span>post_id<span class=\"token punctuation\">,</span> member_id<span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">values</span>\n        <span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> ?<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>getById()는 실제 테이블을 조회하는 대신 프록시 객체만 가져옵니다.</li>\n<li>프록시 객체만 있는 경우 ID값을 제외한 나머지 값을 사용하기 전까지는 실제 DB에 접근하지 않기 때문에 SELECT 쿼리가 날아가지 않습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- findById() 사용한 경우 post 테이블을 조회</span>\n\nHibernate: \n    <span class=\"token keyword\">insert</span> \n    <span class=\"token keyword\">into</span>\n        member\n        <span class=\"token punctuation\">(</span>member_id<span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">values</span>\n        <span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span>\nHibernate: \n    <span class=\"token keyword\">select</span>\n        member0_<span class=\"token punctuation\">.</span>member_id <span class=\"token keyword\">as</span> member_i1_2_0_ \n    <span class=\"token keyword\">from</span>\n        member member0_ \n    <span class=\"token keyword\">where</span>\n        member0_<span class=\"token punctuation\">.</span>member_id<span class=\"token operator\">=</span>?\nHibernate: \n    <span class=\"token keyword\">insert</span> \n    <span class=\"token keyword\">into</span>\n        post\n        <span class=\"token punctuation\">(</span>post_id<span class=\"token punctuation\">,</span> member_id<span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">values</span>\n        <span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> ?<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>findById()를 사용하면 DB에 바로 접근해서 데이터를 가져옵니다.</li>\n</ul>","frontmatter":{"title":"getById vs findById","date":"January 18, 2022"}}},"pageContext":{"slug":"/JPA/getbyid-vs-findbyid/","previous":{"fields":{"slug":"/Spring/bean-injection-하는-방법에-대하여/"},"frontmatter":{"title":"Bean Injection 하는 방법에 대하여"}},"next":{"fields":{"slug":"/Java/threadlocal에-대하여/"},"frontmatter":{"title":"ThreadLocal에 대하여"}}}},"staticQueryHashes":["2486386679","3128451518"]}